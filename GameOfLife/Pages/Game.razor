@page "/game"

<PageTitle>Game of Life</PageTitle>

@using GameOfLife.Data
<div class="game" style="width:@(_maxX*10 + 20)px">

    @for (var y = 0; y < _game.MaxY; y++)
    {
        <div class="game-row">

            @for (var x = 0; x < _game.MaxX; x++)
            {
                var index = x + (y * _game.MaxX);

                if (_game.Board[index])
                {
                    <span class="live-cell" @onclick="() => Toggle(index)"></span>
                }
                else
                {
                    <span class="dead-cell" @onclick="() => Toggle(index)"></span>
                }
            }
        </div>
    }

</div>
<hr/>
<button class="btn btn-primary" @onclick="Advance">Advance</button>
&nbsp;
@if (!_isRunning)
{
    <button class="btn btn-primary" @onclick="Start">Play</button>
}

else
{
    <button class="btn btn-primary" @onclick="Stop">Pause</button>
}
&nbsp;
X<input type="number" min=1 max=100 step=1 @bind=_maxX/>
Y<input type="number" min=1 max=100 step=1 @bind=_maxY/>
Cells<input type="number" min=0 max=@(_maxX * _maxY) step=1 @bind=_startingCells/>
&nbsp;
<button class="btn btn-secondary" @onclick="Initialise">Reset</button>
&nbsp;
<button class="btn btn-secondary" @onclick="Clear">Clear</button>

@code {
    private int _maxX = 100;
    private int _maxY = 50;
    private int _startingCells = 1500;
    private GameBoard _game = new(100, 50, 1500);
    private readonly Timer _timer = new(1000);
    private bool _isRunning;

    protected override void OnInitialized()
    {
        Initialise();
        _timer.Elapsed += TimerElapsed!;
    }

    private void Initialise()
    {
        _game.InitialiseBoard();
    }

    private void Advance()
    {
        _game.AdvanceGeneration();
    }

    private void Start()
    {
        _isRunning = true;
        _timer.Start();
    }

    private void Stop()
    {
        _isRunning = false;
        _timer.Stop();
    }

    private void Toggle(int index)
    {
        _game.ToggleCell(index);
    }

    private void Clear()
    {
        Stop();
        _game = new GameBoard(_maxX, _maxY);
    }

    private async void TimerElapsed(object source, ElapsedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            Advance();
            StateHasChanged();
        });
    }
}